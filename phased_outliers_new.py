#!/usr/bin/env python
import numpy as np
import warnings
import matplotlib.pyplot as plt
import pandas as pd
from astropy.stats import LombScargle
from matplotlib import rc
#rc('text', usetex=True)
#rc('font', family='serif',size=12)

stars = ['cepheid','eclipse_binary','RR_lyrae']
#stars = ['RR_lyrae']
formal = ['Cepheid', 'Eclipse Binary', 'RR Lyrae']
#formal = ['RR Lyrae']
star_names = {star:form for star, form in zip(stars,formal)}
file_counts = [4586, 3633, 2172]
#file_counts = [2172]

star_means = [
[16.38424471276805, 16.384128783777133, 16.397883251848757, 16.390098114131767, 16.400369671970143, 16.422018625656047, 16.42220044614404, 16.42299114697011, 16.429270114519728, 16.431318691888425, 16.435302650685436, 16.435677183635562, 16.44570230799644, 16.449430068124247, 16.459827169829733, 16.449373436114666, 16.459791249083352, 16.465387333989177, 16.465994280642935, 16.472060130143355, 16.47578678338059, 16.474553199862267, 16.484699221411194, 16.4858676564574, 16.48362096419675, 16.486424417177908, 16.494046995073894, 16.493524565270633, 16.49522601248012, 16.500599305096774, 16.499286590019448, 16.496282706951607, 16.50333219152764, 16.50336753993926, 16.502270889255545, 16.50728886214012, 16.505427275192933, 16.513160160184754, 16.507401314493897, 16.507861129373946, 16.504982294166627, 16.49526681923323, 16.48862597651452, 16.479747096584504, 16.470963013191962, 16.470879579082577, 16.445086089958618, 16.425899290675332, 16.40306332408476, 16.384034675861397, 16.351095327421557, 16.324475071295115, 16.301767981664803, 16.265177495303387, 16.244342923151752, 16.217653243737338, 16.200584378704068, 16.17665663900415, 16.175785673818265, 16.163797239316448, 16.158023166495425, 16.16229758831772, 16.16128195035548, 16.15829089662938, 16.165142983143863, 16.172188545089, 16.176408571990947, 16.173941825328583, 16.184574971870262, 16.197855818617622, 16.208397081014226, 16.203244130424174, 16.213077390579816, 16.208783665556496, 16.21768707665319, 16.232515037686284, 16.226691126946164, 16.241654143241263, 16.247895150624537, 16.25828481477852, 16.257248932724863, 16.270254387480563, 16.280416017009212, 16.28198326255929, 16.283044768784706, 16.2921856911606, 16.305292174809214, 16.306548916227303, 16.301563625972218, 16.309745059482843, 16.328962267401792, 16.325634813290204, 16.33458740675304, 16.339327879725847, 16.345138117455377, 16.352995201108197, 16.357436724078713, 16.358596672123536, 16.367920271292295, 16.377091866617448],
[17.613139123254232, 17.625614808174973, 17.629751599335528, 17.629992947210944, 17.61570607246741, 17.62279131582703, 17.625518085678436, 17.61826279401283, 17.634609755224737, 17.636350158854814, 17.637628334997856, 17.64413097077957, 17.666830867796854, 17.65538727670691, 17.667820108462966, 17.670396997648762, 17.681896591565568, 17.712329088639205, 17.725993537036373, 17.759092234065694, 17.786660983890773, 17.82242044511777, 17.856498526663795, 17.89462503654971, 17.90485398956547, 17.93985923530531, 17.884684592232656, 17.856017167381975, 17.821777344309236, 17.78982857764403, 17.750674118535024, 17.729666931150142, 17.694963682644392, 17.683553098290595, 17.674513052858686, 17.667581446911992, 17.64885126262626, 17.64905832644108, 17.65308328555046, 17.643587659787187, 17.62838113234455, 17.64379980668027, 17.644580012196435, 17.641941700638554, 17.628393401649586, 17.620554135579912, 17.62016862902344, 17.627637470107434, 17.62397202797203, 17.612800213181735, 17.61196444681229, 17.610553250740832, 17.61504561315155, 17.61915656169849, 17.61093915353412, 17.6103946936152, 17.62434610103346, 17.633440217785843, 17.621920892203974, 17.621887092727338, 17.645228704700397, 17.64864951550041, 17.631189956175014, 17.64901470745725, 17.664609566421646, 17.652375013579576, 17.675758764876164, 17.691879163495344, 17.69479389939351, 17.725364185693092, 17.723884478609147, 17.762024171344798, 17.778925562357372, 17.779414407548536, 17.801199312217193, 17.811564193982612, 17.800135547576303, 17.766539056040834, 17.759988384637513, 17.750091376811593, 17.72204884531121, 17.69752170154522, 17.683091897303868, 17.676353810292273, 17.65578855462727, 17.654986557589737, 17.659972943526423, 17.66106473754561, 17.641131178977272, 17.64187620102154, 17.640978501581824, 17.633007002298193, 17.627674944694213, 17.6239668998828, 17.627574253185337, 17.622903094784515, 17.612812409551374, 17.607732178500143, 17.59747701313535, 17.60075067442851],
[19.141788402435484, 19.144362605907947, 19.15310374555834, 19.159690314656682, 19.16241589948469, 19.16638945031836, 19.170062871806834, 19.187111362581245, 19.18984364330768, 19.195243340075123, 19.19100348740986, 19.203011102580763, 19.20506114537445, 19.21724745243565, 19.214763270322468, 19.215437994722954, 19.21824492164829, 19.2265902721009, 19.22605723498589, 19.235981430975453, 19.23353386592567, 19.240848557271935, 19.243934462616824, 19.24402129817444, 19.249949010477298, 19.24584435372585, 19.246225761288066, 19.245687583912208, 19.24661393552916, 19.25541167934057, 19.25216920130021, 19.2564520324255, 19.252838080260936, 19.268931175747646, 19.270757782839787, 19.25673070819865, 19.268522496201935, 19.273668940586553, 19.269941248185777, 19.282384308198264, 19.278578812870254, 19.265384317408145, 19.265673114233643, 19.260185432385374, 19.244778641233953, 19.229715337779066, 19.205258660101986, 19.181860904209252, 19.156765711966607, 19.12518272095333, 19.102116177498253, 19.06740711015992, 19.04605768433521, 19.012457749369613, 18.988877604776395, 18.95940008166122, 18.942596351594727, 18.919698072067938, 18.910291615684905, 18.90022759635187, 18.89903980593874, 18.898690225301277, 18.896482001397946, 18.904668459092225, 18.916570204273302, 18.909245444059977, 18.92003144104804, 18.919921581296993, 18.93227667960937, 18.938393470290404, 18.943350901606077, 18.95268522284851, 18.957866597486454, 18.96081883292239, 18.978242043357934, 18.974867488802282, 18.98814546310463, 18.990350430373777, 18.999005321326237, 19.00330539649488, 19.013524456680916, 19.01413188086684, 19.018566820816012, 19.028501134710503, 19.026745093498523, 19.035319695472772, 19.051327604411078, 19.053521361973328, 19.05759649841902, 19.063092752272198, 19.069839828366543, 19.07936362570356, 19.085279976442873, 19.08723235277252, 19.098756972819327, 19.10293597665637, 19.10343328327172, 19.116802917569867, 19.12300836501901, 19.129731031242663]
]

def plot_period_std(ax, mean, std):
    ax.plot(np.linspace(0,1,len(mean)),mean+std, 'r-', alpha=0.3)
    ax.plot(np.linspace(0,1,len(mean)),mean-std, 'r-', alpha=0.3)
    ax.fill_between(np.linspace(0,1,len(mean)), mean-std, mean+std, alpha=0.1)
    ax.plot(np.linspace(0,1,len(mean)),mean, alpha=0.3)

def plot_outliers(ax, outlier, c, alpha):
    ax.plot(np.linspace(0,1,len(outlier)),outlier, c + '-', alpha=alpha)

def find_anomalies_mean_L1(dfC, star):
    df_min, df_max = [dfC.min().min(), dfC.max().max()]
    fig = plt.figure()
    ax_count = 1
    class_mean, class_std = dfC.mean(0), dfC.std(0)
    dfCL1 = df.subtract(class_mean, axis=1)
    dfCL1 = dfCL1.abs()
    dfC["L1"] = dfCL1.sum(axis=1)
    q3 = dfC["L1"].quantile(0.75)
    q1 = dfC["L1"].quantile(0.25)
    iqr = q3-q1
    dfCOutliers = dfC[(dfC.L1>q3+1.5*iqr) | (dfC.L1<q1-1.5*iqr)]
    dfCOutliers.drop('L1', axis=1, inplace=True)
    print(star, ": ", dfC.shape[0], " outliers: ", dfCOutliers.shape[0])


for count, star in enumerate(stars):
    num_files = file_counts[count]
    mags_dict = {}
    mag_ers_dict = {}
    time_dict = {}
    sl = []
    for i in range(num_files-1):
        if i%1000==0:print(star,i)
        with open('phased_{0}/ogle{1}.txt'.format(star,i+1)) as f:
            length = sum(1 for line in f)
            time = np.zeros(length)
            mags = np.zeros(length)
            mag_ers = np.zeros(length)
            f.seek(0)
            for j,line in enumerate(f):
                time[j], mags[j], mag_ers[j] = line.split(' ')[-3:]
        
        bins = np.linspace(0, 1, 101)
        bin_phase = np.digitize(time, bins)
        mags_bins = [mags[bin_phase == i].mean() if mags[bin_phase == i].size else star_means[count][i-1] for i in range(1, len(bins))]
        mags_bins = [ i-j for i, j in zip(mags_bins, star_means[count])]
        sl.append(mags_bins)

    df = pd.DataFrame(sl)
    find_anomalies_mean_L1(df, star)